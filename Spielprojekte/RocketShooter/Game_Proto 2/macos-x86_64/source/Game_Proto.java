/* autogenerated by Processing revision 1291 on 2023-02-15 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Game_Proto extends PApplet {

Player p;
ArrayList<Asteroid> asteroids;
ArrayList<PowerUp> powerUps;

KeyHandler kh;
Counter ca, cp;
int asteroidSpawnTime;

public void setup() {
  /* size commented out by preprocessor */;
  imageMode(CENTER);
  kh = new KeyHandler();
  p = new Player(kh);
  asteroids = new ArrayList<Asteroid>();
  powerUps = new ArrayList<PowerUp>();
  asteroids.add(new Asteroid());
  ca = new Counter();
  cp = new Counter();
  ca.start();
  cp.start();
  asteroidSpawnTime = 1000;
}

public void draw() {
  background(100, 100, 255);

  // add one more asteroid every x seconds
  if (ca.getDuration() > asteroidSpawnTime) {
    asteroids.add(new Asteroid());
    ca.reset();
  }

  // add one more powerup every x seconds
  if (cp.getDuration() > 5000) {
    powerUps.add(new PowerUp());
    cp.reset();
  }

  p.update();
  // if the player was hit, let him blink
  if (p.hit) {
    p.blink();
  }
  p.draw();
  p.drawBlasts();

  // draw Asteroids
  for (int i = 0; i< asteroids.size(); i++) {
    Asteroid a = asteroids.get(i);
    a.update();
    a.draw();
  }

  for (int i = 0; i< powerUps.size(); i++) {
    PowerUp pu = powerUps.get(i);
    pu.update();
    pu.draw();
  }

  // UI
  fill(0);
  textSize(24);
  text("Energie: " +p.energy, 510, 25);
  text("Ammo: " +p.ammo, 10, 25);
  textSize(10);
  text("Object count: ", 10, 470);
  text("Astroiden: " +asteroids.size(), 80, 470);
  text("Blasts: " +p.blasts.size(), 150, 470);


}

public void keyPressed() {
  if (key == 'a') {
    kh.a = true;
  }
  if (key == 'd') {
    kh.d = true;
  }
  if (key == 'w') {
    kh.w = true;
  }
  if (key == 's') {
    kh.s = true;
  }
  if (key == ' ') {
    kh.space = true;
    p.bc.start();
  }
}

public void keyReleased() {
  if (key == 'a') {
    kh.a = false;
  }
  if (key == 'd') {
    kh.d = false;
  }
  if (key == 'w') {
    kh.w = false;
  }
  if (key == 's') {
    kh.s = false;
  }

  if (key == ' ') {
    kh.space = false;
    p.bc.stop();
  }
}

public void gameOver() {
  noLoop();
  p.visible = true;
  p.draw();
  fill(255,0,0);
  textSize(36);
  text("GAME OVER", width/2-50, height/2);
}
class Ammo extends PowerUp {
  
  int ammo = 20;
}
public class Asteroid extends Entity {
  
  ColissionChecker cc;
  boolean hit;
  int strength;

  public Asteroid() {
    cc = new ColissionChecker(this);
    x = (int) random(0,width);
    y = (int) random(-600,-50);
    speed = 2;
    image = loadImage("assets/meteorite.png");
    visible = true;
    hit = false;
    strength = 1;
  }
  
  public void update() {
    if (strength <= 0) {
      asteroids.remove(this);
    }
    
    // if asteroid leaves visible area, 
    // put him in a new random spot on top
    if (y<height) {
      y+=speed;
    } else {
      y = (int) random(-600,-50);
      x = (int) random(0,width);
    }
    
    // check if asteroid gets hit by a blast
    int index = cc.checkBlasts(p);
    if(index != 999) {
      strength -= p.blasts.get(index).energy;
      p.blasts.remove(index);
    }
  }
}
class Blast extends Entity {
  
  int energy;

  public Blast(Entity e, int fp) {
    this.x = e.x;
    this.y = e.y;
    speed = 10;
    visible = true;
    energy = fp;
  }

  public void update() {
    if (y>0) {
      y-=speed;
    } else {
      visible = false;
    }
  }
  
  public void draw() {
      stroke(255, 0, 0);
      strokeWeight(2);
      line(x, y-25, x, y-10);
   
  }
}
class ColissionChecker {
  
  Entity e;
  
  public ColissionChecker(Entity e) {
    this.e = e;
  }
  
  public int checkAsteroid() {
    
    for (int i = 0; i< asteroids.size(); i++) {
      Asteroid a = asteroids.get(i);
      if (abs(e.x - a.x) < 25 && abs(e.y - a.y) < 25) {
        return i;
      }
    }
    return 999;
  }
  
  public int checkPowerUps() {
    
    for (int i = 0; i< powerUps.size(); i++) {
      PowerUp pu = powerUps.get(i);
      if (abs(e.x - pu.x) < 25 && abs(e.y - pu.y) < 25) {
        return i;
      }
    }
    return 999;
  }

  public int checkBlasts(Player p) {
    for (int i = 0; i< p.blasts.size(); i++) {
        Blast b = p.blasts.get(i);
        //for (int j = 0; i< asteroids.size(); j++) {
            if (abs(b.x - e.x) < 25 && abs(b.y - e.y) < 25) {
              return i;
            }
        //}
      }  
    return 999;
  }
}
class Counter {
  int startTime;
  int duration;
  int counter, intervall, now, lastTime;

  public Counter() {
    
  }
  
  public void start() {
    startTime = millis();
  }
  
  public void stop() {
    duration = 0;
    startTime = 0;
  }
  
  public void reset() {
    duration = 0;
    startTime = millis();
  }
  
  public int getDuration() {
    return millis()-startTime;
  }
  
  
}
public class Entity {
  
  PImage image;
  int x, y;
  int speed;
  boolean visible;
  
  public void draw() {
    if (visible) {
      image(image,x,y,30,40); 
    }
  }
  
}
class KeyHandler {
  
  public boolean w,a,s,d,space;

}
public class Player extends Entity {

  KeyHandler kh;
  ColissionChecker cc;
  Counter hc, bc;
  int energy;
  int reloadTime, firePower;
  boolean hit;
  ArrayList<Blast> blasts;
  int ammo;

  public Player(KeyHandler kh) {
    x = 100;
    y = 100;
    ammo = 100;
    speed = 5;
    energy = 100;
    visible = true;
    reloadTime = 50;
    firePower = 1;
    image = loadImage("assets/rocket.png");
    this.kh = kh;
    cc = new ColissionChecker(this);
    hc = new Counter();
    bc = new Counter();
    blasts = new ArrayList<Blast>();
  }

  public void update() {
    if (kh.a) {
      x-=speed;
    }
    if (kh.d) {
      x+=speed;
    }
    if (kh.w) {
      y-=speed;
    }
    if (kh.s) {
      y+=speed;
    }
    if (kh.space) {
      fire();
    }

    int index = cc.checkAsteroid();
    if (index != 999) {
      hit = true;
      asteroids.remove(index);
      energy-=20;
      if (energy <= 0) {
        gameOver();
      }
      hc.start();
    }
    
    int indexPU = cc.checkPowerUps();
    if (indexPU != 999) {
      ammo += powerUps.get(indexPU).ammo;
      powerUps.remove(indexPU);
      //energy+=20;
    }
  }

  private void fire() {
    if (ammo > 0) {
      if (bc.getDuration()>reloadTime) {
        blasts.add(new Blast(this, firePower));
        ammo -=1;
        bc.reset();
      }
    }
  }

  public void drawBlasts() {
    for (int i = 0; i< blasts.size(); i++) {
      Blast b = blasts.get(i);
      b.update();
      if (b.visible) {
        b.draw();
      } else {
        blasts.remove(i);
      }
    }
  }

  public void blink() {
    int blinkDuration = 500;
    int blinkIntervall = 100;

    if (hc.getDuration() < blinkDuration) {
      if (hc.getDuration() % blinkIntervall > 0 &&
        hc.getDuration() % blinkIntervall < blinkIntervall/2) {
        visible = false;
      } else {
        visible = true;
      }
    } else {
      hc.stop();
      visible = true;
      hit = false;
    }
  }
}
class PowerUp extends Entity {

  int ammo;

  public PowerUp() {
    visible = true;
    speed=1;
    ammo = (int) random(0, 50);
    x = (int) random(0, width);
    y = (int) random(-600, -50);
  }

  public void update() {
    // if powerup leaves visible area it vanishes
    if (y<height) {
      y+=speed;
    } else {
      powerUps.remove(this);
    }
  }

  public void draw() {
    if (visible) {
      fill(0, 255, 0);
      ellipse(x, y-25, 25, 25);
    }
  }
}


  public void settings() { size(640, 480); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Game_Proto" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
